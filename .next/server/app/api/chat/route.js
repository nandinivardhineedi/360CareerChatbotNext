"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cdell%5CDownloads%5C360CareerChatbotNext%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdell%5CDownloads%5C360CareerChatbotNext&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cdell%5CDownloads%5C360CareerChatbotNext%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdell%5CDownloads%5C360CareerChatbotNext&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_dell_Downloads_360CareerChatbotNext_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/chat/route.ts */ \"(rsc)/./app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\dell\\\\Downloads\\\\360CareerChatbotNext\\\\app\\\\api\\\\chat\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_dell_Downloads_360CareerChatbotNext_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNkZWxsJTVDRG93bmxvYWRzJTVDMzYwQ2FyZWVyQ2hhdGJvdE5leHQlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q2RlbGwlNUNEb3dubG9hZHMlNUMzNjBDYXJlZXJDaGF0Ym90TmV4dCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDMEI7QUFDdkc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haTM2MC1jYXJlZXItZGVtby8/YWVjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxkZWxsXFxcXERvd25sb2Fkc1xcXFwzNjBDYXJlZXJDaGF0Ym90TmV4dFxcXFxhcHBcXFxcYXBpXFxcXGNoYXRcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9jaGF0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcZGVsbFxcXFxEb3dubG9hZHNcXFxcMzYwQ2FyZWVyQ2hhdGJvdE5leHRcXFxcYXBwXFxcXGFwaVxcXFxjaGF0XFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jaGF0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cdell%5CDownloads%5C360CareerChatbotNext%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdell%5CDownloads%5C360CareerChatbotNext&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/chat/route.ts":
/*!*******************************!*\
  !*** ./app/api/chat/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_rag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/rag */ \"(rsc)/./lib/rag.js\");\n// app/api/chat/route.ts\n\n\nasync function tryGeminiPolish(localText) {\n    // Only attempt if key present\n    const key = process.env.GOOGLE_API_KEY;\n    if (!key) return null;\n    try {\n        const { GoogleGenerativeAI } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@google\").then(__webpack_require__.bind(__webpack_require__, /*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\"));\n        const genAI = new GoogleGenerativeAI(key);\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-1.5-pro\"\n        });\n        // ask the model to rewrite the Answer section to be concise & friendly\n        // const resp = await model.generateContent({\n        //   prompt: `Polish the following career guidance into a crisp, friendly reply. Preserve sections (Summary, Recommended skills, Next Steps, Sample Projects, (if present) 12-week plan). Keep bullets.\\n\\n${localText}`,\n        //   // using general generateContent call; the SDK may vary slightly — this is best-effort.\n        // });\n        // const resp = await model.generateContent([\n        //   {\n        //     role: \"user\",\n        //     parts: [\n        //       { text: `Polish the following career guidance into a crisp, friendly reply. Preserve sections (Summary, Recommended skills, Next Steps, Sample Projects, (if present) 12-week plan). Keep bullets.\\n\\n${localText}` }\n        //     ]\n        //   }\n        // ]);\n        const resp = await model.generateContent(`Polish the following career guidance into a crisp, friendly reply. Preserve sections (Summary, Recommended skills, Next Steps, Sample Projects, (if present) 12-week plan). Keep bullets.\\n\\n${localText}`);\n        const text = resp?.response?.text?.() || resp?.response || null;\n        return typeof text === \"string\" && text.length ? text : null;\n    } catch (e) {\n        console.warn(\"Gemini polish failed:\", e?.message || e);\n        return null;\n    }\n}\nasync function POST(req) {\n    try {\n        const body = await req.json();\n        const messages = body?.messages || [];\n        const profile = body?.profile || null;\n        const last = messages?.[messages.length - 1]?.content || \"\";\n        // Retrieve top hits from local seeds\n        const hits = (0,_lib_rag__WEBPACK_IMPORTED_MODULE_1__.retrieve)(last, 6); // returns array of {id, text}\n        // Local deterministic answer\n        const local = (0,_lib_rag__WEBPACK_IMPORTED_MODULE_1__.synthesizeAnswer)(last, profile, hits);\n        // Try to polish with Gemini if key present (non-blocking)\n        const polished = await tryGeminiPolish(local);\n        const answer = polished || local;\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            answer\n        });\n    } catch (err) {\n        console.error(\"Chat API error:\", err);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            answer: \"Sorry — something went wrong generating the answer.\"\n        }, {\n            status: 500\n        });\n    }\n} // import { NextResponse } from \"next/server\";\n // import { retrieve, synthesizeAnswer } from \"@/lib/rag\";\n // export async function POST(req: Request) {\n //   try {\n //     const { question } = await req.json();\n //     const docs = await retrieve(question);\n //     const answer = await synthesizeAnswer(question, docs);\n //     return NextResponse.json({ answer });\n //   } catch (err) {\n //     console.error(err);\n //     return NextResponse.json({ error: \"Failed to generate response\" }, { status: 500 });\n //   }\n // }\n // import { NextRequest, NextResponse } from \"next/server\";\n // import { retrieve, synthesizeAnswer } from \"@/lib/rag\";\n // async function tryGemini(prompt:string){ const key=process.env.GEMINI_API_KEY; if(!key) return null;\n //   try{ const { GoogleGenerativeAI } = await import(\"@google/generative-ai\"); const genAI=new GoogleGenerativeAI(key);\n //     const model=genAI.getGenerativeModel({model:\"gemini-1.5-pro\"}); const resp=await model.generateContent(prompt); return resp.response.text();\n //   }catch(e){ console.error(\"Gemini error\",e); return null; } }\n // export async function POST(req:NextRequest){ const body=await req.json(); const { messages, profile } = body||{};\n //   const last = messages?.[messages.length-1]?.content || \"\";\n //   const top = retrieve(last, 6); const local = synthesizeAnswer(last, profile, top);\n //   const geminiPrompt = `${local}\\n\\nRewrite the 'Answer' section only as a crisp, friendly response. Keep bullets. Personalize to the profile. Avoid repeating the 'Context' text.`;\n //   const upgraded = await tryGemini(geminiPrompt);\n //   return NextResponse.json({ answer: upgraded || local });\n // }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2NoYXQvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0JBQXdCO0FBQ2dDO0FBQ0Q7QUFFdkQsZUFBZUcsZ0JBQWdCQyxTQUFpQjtJQUM5Qyw4QkFBOEI7SUFDOUIsTUFBTUMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxjQUFjO0lBQ3RDLElBQUksQ0FBQ0gsS0FBSyxPQUFPO0lBQ2pCLElBQUk7UUFDRixNQUFNLEVBQUVJLGtCQUFrQixFQUFFLEdBQUcsTUFBTSw0TUFBK0I7UUFDcEUsTUFBTUMsUUFBUSxJQUFJRCxtQkFBbUJKO1FBQ3JDLE1BQU1NLFFBQVFELE1BQU1FLGtCQUFrQixDQUFDO1lBQUVELE9BQU87UUFBaUI7UUFDakUsdUVBQXVFO1FBQ3ZFLDZDQUE2QztRQUM3Qyx5TkFBeU47UUFDek4sNEZBQTRGO1FBQzVGLE1BQU07UUFFTiw2Q0FBNkM7UUFDN0MsTUFBTTtRQUNOLG9CQUFvQjtRQUNwQixlQUFlO1FBQ2YsOE5BQThOO1FBQzlOLFFBQVE7UUFDUixNQUFNO1FBQ04sTUFBTTtRQUVOLE1BQU1FLE9BQU8sTUFBTUYsTUFBTUcsZUFBZSxDQUN0QyxDQUFDLDZMQUE2TCxFQUFFVixVQUFVLENBQUM7UUFJN00sTUFBTVcsT0FBT0YsTUFBTUcsVUFBVUQsWUFBWUYsTUFBTUcsWUFBWTtRQUMzRCxPQUFPLE9BQU9ELFNBQVMsWUFBWUEsS0FBS0UsTUFBTSxHQUFHRixPQUFPO0lBQzFELEVBQUUsT0FBT0csR0FBRztRQUNWQyxRQUFRQyxJQUFJLENBQUMseUJBQXlCRixHQUFHRyxXQUFXSDtRQUNwRCxPQUFPO0lBQ1Q7QUFDRjtBQUVPLGVBQWVJLEtBQUtDLEdBQWdCO0lBQ3pDLElBQUk7UUFDRixNQUFNQyxPQUFPLE1BQU1ELElBQUlFLElBQUk7UUFDM0IsTUFBTUMsV0FBV0YsTUFBTUUsWUFBWSxFQUFFO1FBQ3JDLE1BQU1DLFVBQVVILE1BQU1HLFdBQVc7UUFDakMsTUFBTUMsT0FBT0YsVUFBVSxDQUFDQSxTQUFTVCxNQUFNLEdBQUcsRUFBRSxFQUFFWSxXQUFXO1FBRXpELHFDQUFxQztRQUNyQyxNQUFNQyxPQUFPN0Isa0RBQVFBLENBQUMyQixNQUFNLElBQUksOEJBQThCO1FBRTlELDZCQUE2QjtRQUM3QixNQUFNRyxRQUFRN0IsMERBQWdCQSxDQUFDMEIsTUFBTUQsU0FBU0c7UUFFOUMsMERBQTBEO1FBQzFELE1BQU1FLFdBQVcsTUFBTTdCLGdCQUFnQjRCO1FBQ3ZDLE1BQU1FLFNBQVNELFlBQVlEO1FBRTNCLE9BQU8vQixxREFBWUEsQ0FBQ3lCLElBQUksQ0FBQztZQUFFUTtRQUFPO0lBQ3BDLEVBQUUsT0FBT0MsS0FBSztRQUNaZixRQUFRZ0IsS0FBSyxDQUFDLG1CQUFtQkQ7UUFDakMsT0FBT2xDLHFEQUFZQSxDQUFDeUIsSUFBSSxDQUFDO1lBQUVRLFFBQVE7UUFBc0QsR0FBRztZQUFFRyxRQUFRO1FBQUk7SUFDNUc7QUFDRixFQW9CQSw4Q0FBOEM7Q0FDOUMsMERBQTBEO0NBRTFELDZDQUE2QztDQUM3QyxVQUFVO0NBQ1YsNkNBQTZDO0NBQzdDLDZDQUE2QztDQUM3Qyw2REFBNkQ7Q0FDN0QsNENBQTRDO0NBQzVDLG9CQUFvQjtDQUNwQiwwQkFBMEI7Q0FDMUIsMkZBQTJGO0NBQzNGLE1BQU07Q0FDTixJQUFJO0NBaUJKLDJEQUEyRDtDQUMzRCwwREFBMEQ7Q0FDMUQsdUdBQXVHO0NBQ3ZHLHdIQUF3SDtDQUN4SCxtSkFBbUo7Q0FDbkosaUVBQWlFO0NBQ2pFLG9IQUFvSDtDQUNwSCwrREFBK0Q7Q0FDL0QsdUZBQXVGO0NBQ3ZGLHVMQUF1TDtDQUN2TCxvREFBb0Q7Q0FDcEQsNkRBQTZEO0NBQzdELElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haTM2MC1jYXJlZXItZGVtby8uL2FwcC9hcGkvY2hhdC9yb3V0ZS50cz9kZTQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGFwcC9hcGkvY2hhdC9yb3V0ZS50c1xuaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgcmV0cmlldmUsIHN5bnRoZXNpemVBbnN3ZXIgfSBmcm9tIFwiQC9saWIvcmFnXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIHRyeUdlbWluaVBvbGlzaChsb2NhbFRleHQ6IHN0cmluZykge1xuICAvLyBPbmx5IGF0dGVtcHQgaWYga2V5IHByZXNlbnRcbiAgY29uc3Qga2V5ID0gcHJvY2Vzcy5lbnYuR09PR0xFX0FQSV9LRVk7XG4gIGlmICgha2V5KSByZXR1cm4gbnVsbDtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IEdvb2dsZUdlbmVyYXRpdmVBSSB9ID0gYXdhaXQgaW1wb3J0KFwiQGdvb2dsZS9nZW5lcmF0aXZlLWFpXCIpO1xuICAgIGNvbnN0IGdlbkFJID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSShrZXkpO1xuICAgIGNvbnN0IG1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZ2VtaW5pLTEuNS1wcm9cIiB9KTtcbiAgICAvLyBhc2sgdGhlIG1vZGVsIHRvIHJld3JpdGUgdGhlIEFuc3dlciBzZWN0aW9uIHRvIGJlIGNvbmNpc2UgJiBmcmllbmRseVxuICAgIC8vIGNvbnN0IHJlc3AgPSBhd2FpdCBtb2RlbC5nZW5lcmF0ZUNvbnRlbnQoe1xuICAgIC8vICAgcHJvbXB0OiBgUG9saXNoIHRoZSBmb2xsb3dpbmcgY2FyZWVyIGd1aWRhbmNlIGludG8gYSBjcmlzcCwgZnJpZW5kbHkgcmVwbHkuIFByZXNlcnZlIHNlY3Rpb25zIChTdW1tYXJ5LCBSZWNvbW1lbmRlZCBza2lsbHMsIE5leHQgU3RlcHMsIFNhbXBsZSBQcm9qZWN0cywgKGlmIHByZXNlbnQpIDEyLXdlZWsgcGxhbikuIEtlZXAgYnVsbGV0cy5cXG5cXG4ke2xvY2FsVGV4dH1gLFxuICAgIC8vICAgLy8gdXNpbmcgZ2VuZXJhbCBnZW5lcmF0ZUNvbnRlbnQgY2FsbDsgdGhlIFNESyBtYXkgdmFyeSBzbGlnaHRseSDigJQgdGhpcyBpcyBiZXN0LWVmZm9ydC5cbiAgICAvLyB9KTtcblxuICAgIC8vIGNvbnN0IHJlc3AgPSBhd2FpdCBtb2RlbC5nZW5lcmF0ZUNvbnRlbnQoW1xuICAgIC8vICAge1xuICAgIC8vICAgICByb2xlOiBcInVzZXJcIixcbiAgICAvLyAgICAgcGFydHM6IFtcbiAgICAvLyAgICAgICB7IHRleHQ6IGBQb2xpc2ggdGhlIGZvbGxvd2luZyBjYXJlZXIgZ3VpZGFuY2UgaW50byBhIGNyaXNwLCBmcmllbmRseSByZXBseS4gUHJlc2VydmUgc2VjdGlvbnMgKFN1bW1hcnksIFJlY29tbWVuZGVkIHNraWxscywgTmV4dCBTdGVwcywgU2FtcGxlIFByb2plY3RzLCAoaWYgcHJlc2VudCkgMTItd2VlayBwbGFuKS4gS2VlcCBidWxsZXRzLlxcblxcbiR7bG9jYWxUZXh0fWAgfVxuICAgIC8vICAgICBdXG4gICAgLy8gICB9XG4gICAgLy8gXSk7XG5cbiAgICBjb25zdCByZXNwID0gYXdhaXQgbW9kZWwuZ2VuZXJhdGVDb250ZW50KFxuICAgICAgYFBvbGlzaCB0aGUgZm9sbG93aW5nIGNhcmVlciBndWlkYW5jZSBpbnRvIGEgY3Jpc3AsIGZyaWVuZGx5IHJlcGx5LiBQcmVzZXJ2ZSBzZWN0aW9ucyAoU3VtbWFyeSwgUmVjb21tZW5kZWQgc2tpbGxzLCBOZXh0IFN0ZXBzLCBTYW1wbGUgUHJvamVjdHMsIChpZiBwcmVzZW50KSAxMi13ZWVrIHBsYW4pLiBLZWVwIGJ1bGxldHMuXFxuXFxuJHtsb2NhbFRleHR9YFxuICAgICk7XG4gICAgXG4gICAgXG4gICAgY29uc3QgdGV4dCA9IHJlc3A/LnJlc3BvbnNlPy50ZXh0Py4oKSB8fCByZXNwPy5yZXNwb25zZSB8fCBudWxsO1xuICAgIHJldHVybiB0eXBlb2YgdGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0ZXh0Lmxlbmd0aCA/IHRleHQgOiBudWxsO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS53YXJuKFwiR2VtaW5pIHBvbGlzaCBmYWlsZWQ6XCIsIGU/Lm1lc3NhZ2UgfHwgZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxOiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXEuanNvbigpO1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gYm9keT8ubWVzc2FnZXMgfHwgW107XG4gICAgY29uc3QgcHJvZmlsZSA9IGJvZHk/LnByb2ZpbGUgfHwgbnVsbDtcbiAgICBjb25zdCBsYXN0ID0gbWVzc2FnZXM/LlttZXNzYWdlcy5sZW5ndGggLSAxXT8uY29udGVudCB8fCBcIlwiO1xuXG4gICAgLy8gUmV0cmlldmUgdG9wIGhpdHMgZnJvbSBsb2NhbCBzZWVkc1xuICAgIGNvbnN0IGhpdHMgPSByZXRyaWV2ZShsYXN0LCA2KTsgLy8gcmV0dXJucyBhcnJheSBvZiB7aWQsIHRleHR9XG5cbiAgICAvLyBMb2NhbCBkZXRlcm1pbmlzdGljIGFuc3dlclxuICAgIGNvbnN0IGxvY2FsID0gc3ludGhlc2l6ZUFuc3dlcihsYXN0LCBwcm9maWxlLCBoaXRzKTtcblxuICAgIC8vIFRyeSB0byBwb2xpc2ggd2l0aCBHZW1pbmkgaWYga2V5IHByZXNlbnQgKG5vbi1ibG9ja2luZylcbiAgICBjb25zdCBwb2xpc2hlZCA9IGF3YWl0IHRyeUdlbWluaVBvbGlzaChsb2NhbCk7XG4gICAgY29uc3QgYW5zd2VyID0gcG9saXNoZWQgfHwgbG9jYWw7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBhbnN3ZXIgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJDaGF0IEFQSSBlcnJvcjpcIiwgZXJyKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBhbnN3ZXI6IFwiU29ycnkg4oCUIHNvbWV0aGluZyB3ZW50IHdyb25nIGdlbmVyYXRpbmcgdGhlIGFuc3dlci5cIiB9LCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8vIGltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuLy8gaW1wb3J0IHsgcmV0cmlldmUsIHN5bnRoZXNpemVBbnN3ZXIgfSBmcm9tIFwiQC9saWIvcmFnXCI7XG5cbi8vIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcTogUmVxdWVzdCkge1xuLy8gICB0cnkge1xuLy8gICAgIGNvbnN0IHsgcXVlc3Rpb24gfSA9IGF3YWl0IHJlcS5qc29uKCk7XG4vLyAgICAgY29uc3QgZG9jcyA9IGF3YWl0IHJldHJpZXZlKHF1ZXN0aW9uKTtcbi8vICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBzeW50aGVzaXplQW5zd2VyKHF1ZXN0aW9uLCBkb2NzKTtcbi8vICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBhbnN3ZXIgfSk7XG4vLyAgIH0gY2F0Y2ggKGVycikge1xuLy8gICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbi8vICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcmVzcG9uc2VcIiB9LCB7IHN0YXR1czogNTAwIH0pO1xuLy8gICB9XG4vLyB9XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8vIGltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcbi8vIGltcG9ydCB7IHJldHJpZXZlLCBzeW50aGVzaXplQW5zd2VyIH0gZnJvbSBcIkAvbGliL3JhZ1wiO1xuLy8gYXN5bmMgZnVuY3Rpb24gdHJ5R2VtaW5pKHByb21wdDpzdHJpbmcpeyBjb25zdCBrZXk9cHJvY2Vzcy5lbnYuR0VNSU5JX0FQSV9LRVk7IGlmKCFrZXkpIHJldHVybiBudWxsO1xuLy8gICB0cnl7IGNvbnN0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gPSBhd2FpdCBpbXBvcnQoXCJAZ29vZ2xlL2dlbmVyYXRpdmUtYWlcIik7IGNvbnN0IGdlbkFJPW5ldyBHb29nbGVHZW5lcmF0aXZlQUkoa2V5KTtcbi8vICAgICBjb25zdCBtb2RlbD1nZW5BSS5nZXRHZW5lcmF0aXZlTW9kZWwoe21vZGVsOlwiZ2VtaW5pLTEuNS1wcm9cIn0pOyBjb25zdCByZXNwPWF3YWl0IG1vZGVsLmdlbmVyYXRlQ29udGVudChwcm9tcHQpOyByZXR1cm4gcmVzcC5yZXNwb25zZS50ZXh0KCk7XG4vLyAgIH1jYXRjaChlKXsgY29uc29sZS5lcnJvcihcIkdlbWluaSBlcnJvclwiLGUpOyByZXR1cm4gbnVsbDsgfSB9XG4vLyBleHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXE6TmV4dFJlcXVlc3QpeyBjb25zdCBib2R5PWF3YWl0IHJlcS5qc29uKCk7IGNvbnN0IHsgbWVzc2FnZXMsIHByb2ZpbGUgfSA9IGJvZHl8fHt9O1xuLy8gICBjb25zdCBsYXN0ID0gbWVzc2FnZXM/LlttZXNzYWdlcy5sZW5ndGgtMV0/LmNvbnRlbnQgfHwgXCJcIjtcbi8vICAgY29uc3QgdG9wID0gcmV0cmlldmUobGFzdCwgNik7IGNvbnN0IGxvY2FsID0gc3ludGhlc2l6ZUFuc3dlcihsYXN0LCBwcm9maWxlLCB0b3ApO1xuLy8gICBjb25zdCBnZW1pbmlQcm9tcHQgPSBgJHtsb2NhbH1cXG5cXG5SZXdyaXRlIHRoZSAnQW5zd2VyJyBzZWN0aW9uIG9ubHkgYXMgYSBjcmlzcCwgZnJpZW5kbHkgcmVzcG9uc2UuIEtlZXAgYnVsbGV0cy4gUGVyc29uYWxpemUgdG8gdGhlIHByb2ZpbGUuIEF2b2lkIHJlcGVhdGluZyB0aGUgJ0NvbnRleHQnIHRleHQuYDtcbi8vICAgY29uc3QgdXBncmFkZWQgPSBhd2FpdCB0cnlHZW1pbmkoZ2VtaW5pUHJvbXB0KTtcbi8vICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgYW5zd2VyOiB1cGdyYWRlZCB8fCBsb2NhbCB9KTtcbi8vIH0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwicmV0cmlldmUiLCJzeW50aGVzaXplQW5zd2VyIiwidHJ5R2VtaW5pUG9saXNoIiwibG9jYWxUZXh0Iiwia2V5IiwicHJvY2VzcyIsImVudiIsIkdPT0dMRV9BUElfS0VZIiwiR29vZ2xlR2VuZXJhdGl2ZUFJIiwiZ2VuQUkiLCJtb2RlbCIsImdldEdlbmVyYXRpdmVNb2RlbCIsInJlc3AiLCJnZW5lcmF0ZUNvbnRlbnQiLCJ0ZXh0IiwicmVzcG9uc2UiLCJsZW5ndGgiLCJlIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwiUE9TVCIsInJlcSIsImJvZHkiLCJqc29uIiwibWVzc2FnZXMiLCJwcm9maWxlIiwibGFzdCIsImNvbnRlbnQiLCJoaXRzIiwibG9jYWwiLCJwb2xpc2hlZCIsImFuc3dlciIsImVyciIsImVycm9yIiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/rag.js":
/*!********************!*\
  !*** ./lib/rag.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadKnowledge: () => (/* binding */ loadKnowledge),\n/* harmony export */   retrieve: () => (/* binding */ retrieve),\n/* harmony export */   synthesizeAnswer: () => (/* binding */ synthesizeAnswer)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n// lib/rag.js\n// Lightweight local RAG + deterministic synthesizer for demo.\n// Uses files placed in /data/seeds/*.txt.\n// Optional: if GOOGLE_API_KEY present and @google/generative-ai installed,\n// the server will attempt to polish the generated answer (non-blocking).\n\n\nconst SEEDS_DIR = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"seeds\");\n// -------------------- utilities --------------------\nfunction splitIntoChunks(text) {\n    // Split on headings or into 1000-char chunks\n    const parts = text.split(/\\n\\s*---+\\s*\\n|(?:\\n#+\\s+)/).map((p)=>p.trim()).filter(Boolean);\n    const chunks = [];\n    for (const p of parts){\n        if (p.length <= 1000) chunks.push(p);\n        else for(let i = 0; i < p.length; i += 1000)chunks.push(p.slice(i, i + 1000));\n    }\n    return chunks;\n}\nfunction score(query, chunk) {\n    // Very simple keyword scoring (works well for demo)\n    const q = query.toLowerCase();\n    let s = 0;\n    for (const token of q.split(/[^a-z0-9]+/).filter(Boolean)){\n        if (new RegExp(`\\\\b${token}\\\\b`, \"i\").test(chunk)) s += 3;\n        if (chunk.toLowerCase().includes(token)) s += 1;\n    }\n    if (/^(\\s*)(AI|Data|Science|Career|Skill|Roadmap|Skill Trends)/i.test(chunk)) s += 1.5;\n    return s;\n}\n// -------------------- load knowledge --------------------\nlet MEMO = null;\nfunction loadKnowledge() {\n    if (MEMO) return MEMO;\n    const files = fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(SEEDS_DIR) ? fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(SEEDS_DIR).filter((f)=>f.endsWith(\".txt\")) : [];\n    const docs = [];\n    for (const f of files){\n        const text = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(path__WEBPACK_IMPORTED_MODULE_1___default().join(SEEDS_DIR, f), \"utf8\");\n        const chunks = splitIntoChunks(text);\n        for(let i = 0; i < chunks.length; i++)docs.push({\n            id: `${f}:${i}`,\n            text: chunks[i]\n        });\n    }\n    MEMO = docs;\n    return docs;\n}\n// -------------------- retrieval --------------------\nfunction retrieve(query, k = 6) {\n    const docs = loadKnowledge();\n    if (!docs || docs.length === 0) return []; // empty array fallback\n    const ranked = docs.map((d)=>({\n            d,\n            s: score(query, d.text)\n        })).sort((a, b)=>b.s - a.s).slice(0, k).map((x)=>x.d);\n    return ranked;\n}\n// -------------------- small helpers for content extraction --------------------\nfunction topKeywordsFromHits(hits, max = 6) {\n    const text = hits.map((h)=>h.text).join(\" \").toLowerCase();\n    const tokens = text.match(/\\b[a-z]{3,}\\b/g) || [];\n    const freq = {};\n    tokens.forEach((t)=>freq[t] = (freq[t] || 0) + 1);\n    // prefer known skill tokens\n    const common = [\n        \"python\",\n        \"sql\",\n        \"machine\",\n        \"data\",\n        \"ml\",\n        \"statistics\",\n        \"matlab\",\n        \"r\",\n        \"cloud\",\n        \"aws\",\n        \"azure\",\n        \"docker\",\n        \"git\",\n        \"javascript\",\n        \"react\",\n        \"cad\",\n        \"staa\",\n        \"design\",\n        \"ux\",\n        \"deep\",\n        \"neural\",\n        \"nlp\"\n    ].filter(Boolean);\n    const candidates = Object.keys(freq).sort((a, b)=>freq[b] - freq[a]);\n    const picks = [];\n    for (const c of [\n        ...common,\n        ...candidates\n    ]){\n        if (picks.length >= max) break;\n        if (text.includes(c) && !picks.includes(c)) picks.push(c);\n    }\n    return picks.map((p)=>p[0].toUpperCase() + p.slice(1));\n}\n// -------------------- 12-week plan generator --------------------\nfunction generate12WeekPlan(profile) {\n    const interest = (profile?.interest || \"General\").toLowerCase();\n    const level = (profile?.level || \"beginner\").toLowerCase();\n    const weeks = [];\n    // baseline modules\n    if (interest.includes(\"data\") || interest.includes(\"ai\") || interest.includes(\"ml\")) {\n        // data/ai plan\n        if (level === \"beginner\") {\n            weeks.push(\"Weeks 1-2: Revise math fundamentals (basic probability, linear algebra) and NCERT science concepts.\");\n            weeks.push(\"Weeks 3-4: Learn Python basics (syntax, data types, loops, functions).\");\n            weeks.push(\"Weeks 5-6: Intro to data handling (Pandas) + SQL basics; small data cleaning tasks.\");\n            weeks.push(\"Weeks 7-8: Learn core ML concepts (supervised learning) and try sklearn models on a simple dataset.\");\n            weeks.push(\"Weeks 9-10: Build mini project: classification pipeline + write a short report.\");\n            weeks.push(\"Weeks 11-12: Prepare portfolio entry; take an introductory online course/cert (Coursera/NPTEL) and document learnings.\");\n        } else {\n            weeks.push(\"Weeks 1-2: Quick refresh of advanced math/statistics topics relevant to ML.\");\n            weeks.push(\"Weeks 3-4: Intermediate Python + data libraries (NumPy, Pandas) and SQL for analytics.\");\n            weeks.push(\"Weeks 5-6: Study ML algorithms (trees, SVM, neural nets) and implement examples.\");\n            weeks.push(\"Weeks 7-8: Hands-on deep learning intro (TensorFlow/PyTorch basics).\");\n            weeks.push(\"Weeks 9-10: Capstone project (end-to-end) and create visuals for results.\");\n            weeks.push(\"Weeks 11-12: Prepare portfolio & apply for internships; take one certification.\");\n        }\n    } else if (interest.includes(\"design\") || interest.includes(\"ui\") || interest.includes(\"ux\")) {\n        weeks.push(\"Weeks 1-2: Fundamentals of design, user research basics.\");\n        weeks.push(\"Weeks 3-4: Wireframing & prototyping tools (Figma basics).\");\n        weeks.push(\"Weeks 5-6: Interaction design & small usability study.\");\n        weeks.push(\"Weeks 7-8: Build a small product prototype and test.\");\n        weeks.push(\"Weeks 9-10: Polish portfolio piece, document process.\");\n        weeks.push(\"Weeks 11-12: Publish portfolio and apply to internships/junior roles.\");\n    } else {\n        // general STEM / scientist plan\n        weeks.push(\"Weeks 1-2: Strengthen core science fundamentals relevant to your stream.\");\n        weeks.push(\"Weeks 3-4: Learn data analysis basics (Excel/Google Sheets) and basic Python.\");\n        weeks.push(\"Weeks 5-6: Design a mini experiment or data study around your interest.\");\n        weeks.push(\"Weeks 7-8: Work on results & write a report; learn literature search basics.\");\n        weeks.push(\"Weeks 9-10: Take an introductory certification (NPTEL/Coursera) related to your field.\");\n        weeks.push(\"Weeks 11-12: Prepare presentation/portfolio; seek mentorship/internship opportunities.\");\n    }\n    // if shorter than 12 weeks, expand by splitting groups into weeks\n    while(weeks.length < 6)weeks.push(\"Self-study and consolidation.\");\n    return weeks;\n}\n// -------------------- synthesize answer (deterministic local) --------------------\nfunction synthesizeAnswer(query, profile = {}, hits = []) {\n    // If hits is not array, coerce\n    hits = Array.isArray(hits) ? hits : [];\n    // 1) Short career summary: use profile + hits\n    const namePart = profile?.name ? `${profile.name}, ` : \"\";\n    const interest = profile?.interest || \"your chosen field\";\n    const summary = `${namePart}based on your interest in ${interest} and level (${profile?.level || \"beginner\"}), here is a concise plan and skills to focus on.`;\n    // 2) Top recommended skills/certs (heuristic)\n    let skills = topKeywordsFromHits(hits, 5);\n    if (skills.length === 0) {\n        // fallback by interest\n        const intLower = interest.toLowerCase();\n        if (intLower.includes(\"data\") || intLower.includes(\"ai\") || intLower.includes(\"ml\")) {\n            skills = [\n                \"Python\",\n                \"SQL\",\n                \"Statistics\",\n                \"Machine Learning\",\n                \"Data Visualization\"\n            ];\n        } else if (intLower.includes(\"design\")) {\n            skills = [\n                \"Design Thinking\",\n                \"Figma\",\n                \"Wireframing\",\n                \"Prototyping\",\n                \"User Research\"\n            ];\n        } else {\n            skills = [\n                \"Core Subject Mastery\",\n                \"Basic Data Skills\",\n                \"Research & Documentation\"\n            ];\n        }\n    }\n    // 3) Short step-by-step next steps (generic)\n    const steps = [\n        \"Strengthen your theory/fundamentals (NCERT / course-specific basics).\",\n        \"Learn one practical tool/tech (e.g., Python for data or Figma for design).\",\n        \"Build a small, demonstrable project (document results).\",\n        \"Take one recognized course/certification and publish your work.\"\n    ];\n    // 4) Two sample projects - tailored by interest\n    let projects = [];\n    const intLower = interest.toLowerCase();\n    if (intLower.includes(\"data\") || intLower.includes(\"ai\") || intLower.includes(\"ml\")) {\n        projects = [\n            \"Project 1 — Classify a dataset (end-to-end): Data cleaning → model → evaluation → write-up.\",\n            \"Project 2 — Data visualization report on a public dataset (publish on GitHub).\"\n        ];\n    } else if (intLower.includes(\"design\")) {\n        projects = [\n            \"Project 1 — Complete a 2-week UX case study: research → wireframes → prototype.\",\n            \"Project 2 — Redesign a small app page and document UX decisions.\"\n        ];\n    } else {\n        projects = [\n            \"Project 1 — Conduct a small experiment or study and write the results.\",\n            \"Project 2 — Create a presentation/summary of learnings and share it publicly.\"\n        ];\n    }\n    // 5) If the user asked for a 12-week plan, generate it\n    const want12Week = /\\b(12[- ]?week|twelve week|12 week plan|create a 12 week plan)\\b/i.test(query);\n    const planSection = want12Week ? generate12WeekPlan(profile).map((p, idx)=>`Week block ${idx + 1}: ${p}`) : [];\n    // 6) Build final structured string\n    const out = [\n        `Summary: ${summary}`,\n        \"\",\n        \"Recommended skills & certifications:\",\n        ...skills.map((s)=>`- ${s}`),\n        \"\",\n        \"Next Steps:\",\n        ...steps.map((s)=>`- ${s}`),\n        \"\",\n        \"Sample Projects:\",\n        ...projects.map((p, i)=>`${i + 1}. ${p}`),\n        \"\",\n        ...planSection.length ? [\n            \"12-week plan:\",\n            ...planSection,\n            \"\"\n        ] : [],\n        \"Motivation: Take small consistent steps — progress compounds faster than you think!\"\n    ];\n    return out.join(\"\\n\");\n} // import { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\n // import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\n // import { Document } from \"langchain/document\";\n // import fs from \"fs\";\n // import path from \"path\";\n // import { GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\n // let store;\n // export async function initStore() {\n //   if (store) return store;\n //   const apiKey = process.env.GOOGLE_API_KEY;\n //   if (!apiKey) {\n //     console.warn(\"⚠️ GOOGLE_API_KEY missing, using mock vector store\");\n //     // ✅ Return fake store with similaritySearch fallback\n //     return {\n //       similaritySearch: async () => [\n //         new Document({ pageContent: \"1. Learn basics of Python, SQL\" }),\n //         new Document({ pageContent: \"2. Specialize in AI/ML or Data Science\" }),\n //         new Document({ pageContent: \"3. Earn certifications (Coursera, AWS, Azure)\" }),\n //         new Document({ pageContent: \"4. Apply for internships & entry-level roles\" }),\n //       ],\n //     };\n //   }\n //   // ✅ Load your dataset\n //   const datasetPath = path.join(process.cwd(), \"public\", \"dataset_career_path.txt\");\n //   const rawText = fs.readFileSync(datasetPath, \"utf8\");\n //   const splitter = new RecursiveCharacterTextSplitter({ chunkSize: 500, chunkOverlap: 50 });\n //   const docs = await splitter.splitDocuments([new Document({ pageContent: rawText })]);\n //   const embeddings = new GoogleGenerativeAIEmbeddings({ apiKey });\n //   store = await MemoryVectorStore.fromDocuments(docs, embeddings);\n //   return store;\n // }\n // export async function retrieve(query) {\n //   const store = await initStore();\n //   return store.similaritySearch(query, 4);\n // }\n // // 🔹 Generate\n // export async function synthesizeAnswer(query, docs) {\n //   const llm = new ChatGoogleGenerativeAI({\n //     apiKey: process.env.GOOGLE_API_KEY,\n //     model: \"gemini-pro\",\n //     temperature: 0.4,\n //   });\n //   const context = docs.map((d) => d.pageContent).join(\"\\n\\n\");\n //   const prompt = new PromptTemplate({\n //     template: `\n // You are AI 360 Career Bot. \n // Provide a clear, actionable career guidance response.\n // Context:\n // {context}\n // Question:\n // {question}\n // Answer:\n // - Summarize main path.\n // - List 3–4 essential skills/certs.\n // - Suggest 2 mini projects.\n //     `,\n //     inputVariables: [\"context\", \"question\"],\n //   });\n //   const input = await prompt.format({ context, question: query });\n //   const response = await llm.invoke(input);\n //   return response.content || response.text || \"Sorry, I could not generate a response.\";\n // }\n // import fs from \"fs\";\n // import path from \"path\";\n // import { GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\n // import { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\n // import { PromptTemplate } from \"@langchain/core/prompts\";\n // import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\n // // Initialize vector store\n // let vectorStore;\n // async function initStore() {\n //   if (!vectorStore) {\n //     const apiKey = process.env.GOOGLE_API_KEY;\n //     if (!apiKey) {\n //       // throw new Error(\"❌ GOOGLE_API_KEY is not set. Please add it to .env.local and restart.\");\n //       console.warn(\"⚠️ GOOGLE_API_KEY missing, using mock response...\");\n //     return `\n // 1. Learn Python + SQL basics  \n // 2. Move into Data Science or ML specialization  \n // 3. Do certifications (Coursera, AWS, Azure)  \n // 4. Apply for internships & entry-level jobs  \n //     `;\n //     }\n //     const embeddings = new GoogleGenerativeAIEmbeddings({\n //       apiKey,\n //       model: \"gemini-pro\",\n //     });\n //     vectorStore = new MemoryVectorStore(embeddings);\n //     // preload dataset\n //     const datasetPath = path.join(process.cwd(), \"data\", \"dataset_career_path.txt\");\n //     if (fs.existsSync(datasetPath)) {\n //       const text = fs.readFileSync(datasetPath, \"utf8\");\n //       const splitter = new RecursiveCharacterTextSplitter({ chunkSize: 500, chunkOverlap: 50 });\n //       const docs = await splitter.createDocuments([text]);\n //       await vectorStore.addDocuments(docs);\n //     }\n //   }\n //   return vectorStore;\n // }\n // // 🔹 Retrieve\n // export async function retrieve(query) {\n //   const store = await initStore();\n //   return store.similaritySearch(query, 4);\n // }\n // // 🔹 Generate\n // export async function synthesizeAnswer(query, docs) {\n //   const llm = new ChatGoogleGenerativeAI({\n //     apiKey: process.env.GOOGLE_API_KEY,\n //     model: \"gemini-pro\",\n //     temperature: 0.4,\n //   });\n //   const context = docs.map((d) => d.pageContent).join(\"\\n\\n\");\n //   const prompt = new PromptTemplate({\n //     template: `\n // You are AI 360 Career Bot. \n // Provide a clear, actionable career guidance response.\n // Context:\n // {context}\n // Question:\n // {question}\n // Answer:\n // - Summarize main path.\n // - List 3–4 essential skills/certs.\n // - Suggest 2 mini projects.\n //     `,\n //     inputVariables: [\"context\", \"question\"],\n //   });\n //   const input = await prompt.format({ context, question: query });\n //   const response = await llm.invoke(input);\n //   return response.content || response.text || \"Sorry, I could not generate a response.\";\n // }\n // import fs from \"fs\";\n // import path from \"path\";\n // import { GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\n // import { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\n // import { PromptTemplate } from \"@langchain/core/prompts\";\n // import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\n // // Create memory store once\n // const storePath = path.join(process.cwd(), \"data/memory_store.json\");\n // // Load or init memory\n // let vectorStore;\n // async function initStore() {\n //   if (!vectorStore) {\n //     const embeddings = new GoogleGenerativeAIEmbeddings({\n //       apiKey: process.env.GOOGLE_API_KEY,\n //       model: \"embedding-001\",\n //     });\n //     vectorStore = new MemoryVectorStore(embeddings);\n //     // preload dataset if available\n //     const datasetPath = path.join(process.cwd(), \"data\", \"dataset_career_path.txt\");\n //     if (fs.existsSync(datasetPath)) {\n //       const text = fs.readFileSync(datasetPath, \"utf8\");\n //       const splitter = new RecursiveCharacterTextSplitter({ chunkSize: 500, chunkOverlap: 50 });\n //       const docs = await splitter.createDocuments([text]);\n //       await vectorStore.addDocuments(docs);\n //     }\n //   }\n //   return vectorStore;\n // }\n // // 🔹 Retrieve relevant docs\n // export async function retrieve(query) {\n //   const store = await initStore();\n //   return store.similaritySearch(query, 4);\n // }\n // // 🔹 Synthesize final answer\n // export async function synthesizeAnswer(query, docs) {\n //   const llm = new ChatGoogleGenerativeAI({\n //     apiKey: process.env.GOOGLE_API_KEY,\n //     model: \"gemini-pro\",\n //     temperature: 0.4,\n //   });\n //   const context = docs.map((d) => d.pageContent).join(\"\\n\\n\");\n //   const prompt = new PromptTemplate({\n //     template: `\n // You are AI 360 Career Bot. \n // Use the context below to answer the question.\n // Context:\n // {context}\n // Question:\n // {question}\n // Answer in clear, actionable career guidance steps.\n //     `,\n //     inputVariables: [\"context\", \"question\"],\n //   });\n //   const input = await prompt.format({ context, question: query });\n //   const response = await llm.invoke(input);\n //   return response.content || response.text || \"Sorry, I could not generate a response.\";\n // }\n // import fs from \"fs\";\n // import path from \"path\";\n // // import { GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\n // // import { GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI } from \"langchain/google-genai\";\n // // import { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\n // // import { PromptTemplate } from \"@langchain/core/prompts\";\n // // import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\n // import { GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\n // import { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\n // import { PromptTemplate } from \"@langchain/core/prompts\";\n // import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\n // const INDEX_FILE = path.join(process.cwd(), \"data\", \"index\", \"memory_store.json\");\n // // Embeddings + LLM\n // const EMBEDDINGS = new GoogleGenerativeAIEmbeddings({\n //   apiKey: process.env.GEMINI_API_KEY,\n //   model: \"text-embedding-004\",\n // });\n // const LLM = new ChatGoogleGenerativeAI({\n //   apiKey: process.env.GEMINI_API_KEY,\n //   model: \"gemini-1.5-pro\",\n //   temperature: 0.3,\n //   maxOutputTokens: 1024,\n // });\n // // 🔹 System prompt ensures structured, user-friendly answers\n // const SYSTEM_PROMPT = `\n // You are AI 360 Career Assistant.\n // Your job: give clear, structured, motivating career advice.\n // Rules:\n // - DO NOT dump raw text from sources.\n // - Summarize insights into easy-to-read guidance.\n // - Use bullet points for skills, certifications, and steps.\n // - If asked for a plan, give a week-by-week roadmap.\n // - Always end with 1 motivational line.\n // `;\n // const QA_TEMPLATE = PromptTemplate.fromTemplate(`\n // {system}\n // User Profile:\n // - Name: {name}\n // - Class/Standard: {standard}\n // - Interest: {interest}\n // - Level: {level}\n // - Goal: {goal}\n // Retrieved Knowledge Base Context:\n // {context}\n // User Question:\n // {question}\n // Now respond with:\n // 1. Short Career Summary (2–3 lines)\n // 2. Recommended Skills & Certifications\n // 3. Step-by-Step Career Roadmap\n // 4. 2 Sample Projects (mini or capstone)\n // 5. Motivational Closing (1 line)\n // `);\n // export class RAGEngine {\n //   constructor() {\n //     this.vectorStore = null;\n //   }\n //   async loadOrCreateStore() {\n //     if (this.vectorStore) return;\n //     try {\n //       if (fs.existsSync(INDEX_FILE)) {\n //         const raw = fs.readFileSync(INDEX_FILE, \"utf-8\");\n //         const docs = JSON.parse(raw);\n //         this.vectorStore = await MemoryVectorStore.fromDocuments(docs, EMBEDDINGS);\n //       } else {\n //         this.vectorStore = new MemoryVectorStore(EMBEDDINGS);\n //         this.saveStore();\n //       }\n //     } catch (e) {\n //       console.error(\"⚠️ Error loading store:\", e);\n //       this.vectorStore = new MemoryVectorStore(EMBEDDINGS);\n //     }\n //   }\n //   saveStore() {\n //     if (!this.vectorStore) return;\n //     const data = this.vectorStore.memoryVectors || [];\n //     fs.mkdirSync(path.dirname(INDEX_FILE), { recursive: true });\n //     fs.writeFileSync(INDEX_FILE, JSON.stringify(data, null, 2), \"utf-8\");\n //   }\n //   async ingestRawText(text, metadata = {}) {\n //     await this.loadOrCreateStore();\n //     const splitter = new RecursiveCharacterTextSplitter({ chunkSize: 1000, chunkOverlap: 200 });\n //     const docs = await splitter.createDocuments([text], [metadata]);\n //     await this.vectorStore.addDocuments(docs);\n //     this.saveStore();\n //     return { added: docs.length };\n //   }\n //   async retrieveContext(query, k = 4) {\n //     await this.loadOrCreateStore();\n //     const retriever = this.vectorStore.asRetriever(k);\n //     const docs = await retriever.getRelevantDocuments(query);\n //     return docs.map((d) => d.pageContent).join(\"\\n\\n\");\n //   }\n //   async answer(profile, question) {\n //     await this.loadOrCreateStore();\n //     const context = await this.retrieveContext(question);\n //     const prompt = await QA_TEMPLATE.format({\n //       system: SYSTEM_PROMPT,\n //       context,\n //       question,\n //       ...profile, // includes {name, standard, interest, level, goal}\n //     });\n //     const response = await LLM.invoke(prompt);\n //     return response.content?.[0]?.text || response.text || String(response);\n //   }\n // }\n // export const rag = new RAGEngine();\n // import fs from \"fs\"; import path from \"path\";\n // const DATA_DIR=path.join(process.cwd(),\"data\",\"seeds\");\n // function splitIntoChunks(text){\n //   const parts=text.split(/\\n\\s*---+\\s*\\n|\\n# /g).map(p=>p.trim()).filter(Boolean);\n //   const chunks=[]; for(const p of parts){ if(p.length<=1200){chunks.push(p);} else{ for(let i=0;i<p.length;i+=1200){chunks.push(p.slice(i,i+1200));}}} return chunks;\n // }\n // function score(query,chunk){ const q=query.toLowerCase(); let s=0;\n //   for(const token of q.split(/[^a-z0-9+]+/g)){ if(!token)continue; const re=new RegExp(`\\\\b${token.replace(/[.*+?^${}()|[\\\\]\\\\]/g,'\\\\$&')}\\\\b`,\"i\"); if(re.test(chunk)) s+=2; if(chunk.toLowerCase().includes(token)) s+=1; }\n //   if(/^\\s*(AI|Data|Cloud|Cyber|Software|Design|Commerce|Medical|Law|Career)/i.test(chunk)) s+=1.5;\n //   return s;\n // }\n // export function loadKnowledge(){ const files=fs.readdirSync(DATA_DIR).filter(f=>f.endsWith(\".txt\")); const docs=[];\n //   for(const f of files){ const text=fs.readFileSync(path.join(DATA_DIR,f),\"utf-8\"); const chunks=splitIntoChunks(text).map((c,i)=>({id:`${f}:${i}`,text:c})); docs.push(...chunks);} return docs; }\n // const MEMO={docs:null}; export function getDocs(){ if(!MEMO.docs) MEMO.docs=loadKnowledge(); return MEMO.docs; }\n // export function retrieve(query,k=6){ const docs=getDocs(); const ranked=docs.map(d=>({d,s:score(query,d.text)})).sort((a,b)=>b.s-a.s).slice(0,k).map(x=>x.d); return ranked; }\n // export function synthesizeAnswer(query,profile,hits){\n //   const header=profile?.name?`For ${profile.name} (${profile.standard}, interest: ${profile.interest}, level: ${profile.level})\\n\\n`:\"\";\n //   const context=hits.map(h=>`• ${h.text.replace(/\\n+/g,' ').slice(0,300)}...`).join(\"\\n\");\n //   const promptLike=[`Question: ${query}`,`Context (snippets):\\n${context}`,`Guidelines: Provide a concise, actionable answer with steps, recommended skills/certs, and 2 sample projects. Align with the user's level and goal if provided.`].join(\"\\n\\n\");\n //   const steps=[\"Start with foundations (core subjects & terminology).\",\"Build practical skills via a short project.\",\"Earn one reputed certification relevant to your track.\",\"Join a community; apply for internships or challenges.\"].join(\"\\n- \");\n //   const rec=hits[0]?.text?.slice(0,200)||\"\";\n //   return `${header}${promptLike}\\n\\nAnswer:\\n- ${steps}\\n\\nBased on the context, focus on: ${rec}...\\n\\nSample projects:\\n1) Mini capstone aligned to your interest (document outcomes).\\n2) Portfolio piece (publish on GitHub/Behance).\\n\\nYou can ask follow-ups like: \"Which cert first?\" or \"Create a 12-week plan.\"`;\n // }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/rag.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cdell%5CDownloads%5C360CareerChatbotNext%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdell%5CDownloads%5C360CareerChatbotNext&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();